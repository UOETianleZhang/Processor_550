// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/09/2019 20:51:59"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          getScoreCpu
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module getScoreCpu_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [9:0] curScore;
reg reset;
reg [10:0] rx;
reg [10:0] ry;
reg [3:0] var;
// wires                                               
wire [10:0] offsetX;
wire [10:0] offsetY;
wire [9:0] score;

// assign statements (if any)                          
getScoreCpu i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.curScore(curScore),
	.offsetX(offsetX),
	.offsetY(offsetY),
	.reset(reset),
	.rx(rx),
	.ry(ry),
	.score(score),
	.\var (var)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #500 1'b1;
	#500;
end 
// curScore[ 9 ]
initial
begin
	curScore[9] = 1'b0;
end 
// curScore[ 8 ]
initial
begin
	curScore[8] = 1'b0;
end 
// curScore[ 7 ]
initial
begin
	curScore[7] = 1'b0;
end 
// curScore[ 6 ]
initial
begin
	curScore[6] = 1'b0;
end 
// curScore[ 5 ]
initial
begin
	curScore[5] = 1'b0;
end 
// curScore[ 4 ]
initial
begin
	curScore[4] = 1'b0;
end 
// curScore[ 3 ]
initial
begin
	curScore[3] = 1'b0;
end 
// curScore[ 2 ]
initial
begin
	curScore[2] = 1'b1;
end 
// curScore[ 1 ]
initial
begin
	curScore[1] = 1'b0;
end 
// curScore[ 0 ]
initial
begin
	curScore[0] = 1'b0;
end 
// \var [ 3 ]
initial
begin
	var[3] = 1'b0;
end 
// \var [ 2 ]
initial
begin
	var[2] = 1'b0;
end 
// \var [ 1 ]
initial
begin
	var[1] = 1'b1;
end 
// \var [ 0 ]
initial
begin
	var[0] = 1'b0;
end 
endmodule

