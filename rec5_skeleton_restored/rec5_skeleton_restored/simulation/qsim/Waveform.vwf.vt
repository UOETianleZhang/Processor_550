// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/09/2019 17:32:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          squareRender
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module squareRender_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [18:0] address;
reg clk;
reg down;
reg left;
reg [7:0] qin;
reg right;
reg [9:0] scoreToPrint;
reg up;
// wires                                               
wire [9:0] myScore;
wire [7:0] qout;
wire [9:0] toAdd;

// assign statements (if any)                          
squareRender i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.clk(clk),
	.down(down),
	.left(left),
	.myScore(myScore),
	.qin(qin),
	.qout(qout),
	.right(right),
	.scoreToPrint(scoreToPrint),
	.toAdd(toAdd),
	.up(up)
);
initial 
begin 
#1000000 $finish;
end 
// scoreToPrint[ 9 ]
initial
begin
	scoreToPrint[9] = 1'b0;
end 
// scoreToPrint[ 8 ]
initial
begin
	scoreToPrint[8] = 1'b0;
end 
// scoreToPrint[ 7 ]
initial
begin
	scoreToPrint[7] = 1'b0;
end 
// scoreToPrint[ 6 ]
initial
begin
	scoreToPrint[6] = 1'b0;
end 
// scoreToPrint[ 5 ]
initial
begin
	scoreToPrint[5] = 1'b0;
end 
// scoreToPrint[ 4 ]
initial
begin
	scoreToPrint[4] = 1'b0;
end 
// scoreToPrint[ 3 ]
initial
begin
	scoreToPrint[3] = 1'b0;
end 
// scoreToPrint[ 2 ]
initial
begin
	scoreToPrint[2] = 1'b0;
end 
// scoreToPrint[ 1 ]
initial
begin
	scoreToPrint[1] = 1'b0;
end 
// scoreToPrint[ 0 ]
initial
begin
	scoreToPrint[0] = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
endmodule

